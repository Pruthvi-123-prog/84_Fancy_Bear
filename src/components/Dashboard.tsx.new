'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { 
  Shield, 
  Zap, 
  Search, 
  Eye, 
  Download, 
  ExternalLink, 
  Clock,
  AlertTriangle,
  CheckCircle,
  Info
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { ScanResult } from '@/lib/types';
import { formatBytes, formatDuration, getScoreColor, getScoreLabel } from '@/lib/utils';
import { Interactive3DChart } from '@/components/charts/Interactive3DChart';
import '@/components/charts/chart-styles.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShieldAlt } from '@fortawesome/free-solid-svg-icons';

interface DashboardProps {
  scanResult: ScanResult;
  onNewScan: () => void;
  onExportPDF: () => void;
}

const categoryColors = {
  security: 'text-red-500',
  performance: 'text-primary-500',
  seo: 'text-green-500',
  accessibility: 'text-purple-500',
};

export function Dashboard({ scanResult, onNewScan, onExportPDF }: DashboardProps) {
  const overallScore = Math.round(
    (scanResult.security.score + 
     scanResult.performance.score + 
     scanResult.seo.score + 
     scanResult.accessibility.score) / 4
  );

  const chartData = [
    { name: 'Security', score: scanResult.security.score, color: 'rgba(255, 69, 69, 0.85)' },
    { name: 'Performance', score: scanResult.performance.score, color: 'rgba(0, 119, 255, 0.85)' },
    { name: 'SEO', score: scanResult.seo.score, color: 'rgba(0, 204, 136, 0.85)' },
    { name: 'Accessibility', score: scanResult.accessibility.score, color: 'rgba(121, 40, 202, 0.85)' },
  ];

  const ScoreCard = ({ 
    title, 
    score, 
    icon: Icon, 
    issues, 
    className,
    details 
  }: {
    title: string;
    score: number;
    icon: React.ElementType;
    issues: string[];
    className?: string;
    details?: React.ReactNode;
  }) => (
    <motion.div
      className="animate-hover-lift h-full"
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5, delay: title === "Security" ? 0.1 : title === "Performance" ? 0.2 : title === "SEO" ? 0.3 : 0.4 }}
    >
      <Card className="h-full border border-neutral-800 bg-neutral-900/60 backdrop-blur-md hover:bg-neutral-900/80 transition-all duration-300 shadow-lg">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2.5 rounded-lg bg-gradient-to-br from-neutral-800 to-neutral-900 ring-1 ring-neutral-700/50">
                <Icon className={`h-5 w-5 ${title === "Security" ? "text-red-400" : 
                                            title === "Performance" ? "text-blue-400" : 
                                            title === "SEO" ? "text-emerald-400" : 
                                            "text-purple-400"}`} />
              </div>
              <CardTitle className="text-lg font-heading tracking-tight text-neutral-100">{title}</CardTitle>
            </div>
            <div className="text-right">
              <div className={`text-3xl font-heading font-bold ${
                score >= 80 ? "text-emerald-400" : 
                score >= 60 ? "text-blue-400" : 
                score >= 40 ? "text-amber-400" : 
                "text-red-400"
              }`}>{score}</div>
              <div className="text-xs font-body text-neutral-400">{getScoreLabel(score)}</div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="h-2 bg-neutral-800 rounded-full overflow-hidden">
              <div 
                className={`h-full rounded-full ${
                  score >= 80 ? "bg-gradient-to-r from-emerald-500 to-emerald-400" : 
                  score >= 60 ? "bg-gradient-to-r from-blue-600 to-blue-400" : 
                  score >= 40 ? "bg-gradient-to-r from-amber-500 to-amber-400" : 
                  "bg-gradient-to-r from-red-600 to-red-400"
                }`}
                style={{ width: `${score}%` }}
              />
            </div>
            
            {details && (
              <div className="text-sm text-neutral-400">
                {details}
                {issues.length === 0 ? (
                  <div className="flex items-center gap-2 text-emerald-400 text-sm mt-2">
                    <CheckCircle className="h-3.5 w-3.5" />
                    No issues found
                  </div>
                ) : null}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );

  return (
    <div className="w-full max-w-7xl mx-auto space-y-8 pb-16">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6 bg-neutral-900/60 backdrop-blur-md border border-neutral-800 rounded-xl p-6 shadow-lg"
      >
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-400 via-indigo-400 to-purple-400 text-transparent bg-clip-text font-heading">Scan Results</h1>
          <div className="flex flex-wrap items-center gap-3 text-neutral-400 mt-2">
            <div className="flex items-center gap-2">
              <div className="p-1 rounded-md bg-neutral-800">
                <ExternalLink className="h-4 w-4 text-blue-400" />
              </div>
              <span className="truncate max-w-[200px] sm:max-w-md font-mono text-sm">{scanResult.url}</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="p-1 rounded-md bg-neutral-800">
                <Clock className="h-4 w-4 text-purple-400" />
              </div>
              <span className="font-mono text-sm">{new Date(scanResult.date).toLocaleString()}</span>
            </div>
          </div>
        </div>
        <div className="flex gap-3 mt-4 sm:mt-0">
          <Button 
            onClick={onNewScan} 
            variant="outline" 
            className="border-neutral-700 bg-neutral-900 hover:bg-neutral-800 hover:border-neutral-600 text-neutral-200"
          >
            New Scan
          </Button>
          <Button 
            onClick={onExportPDF} 
            className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white border-0 flex items-center gap-2"
          >
            <Download className="h-4 w-4" />
            Export PDF
          </Button>
        </div>
      </motion.div>

      {/* Overall Score */}
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5 }}
      >
        <Card className="border border-neutral-800 bg-gradient-to-r from-neutral-900 to-neutral-900/80 overflow-hidden relative shadow-2xl">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-indigo-500/5 to-purple-500/5"></div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(56,189,248,0.1),transparent_50%)]"></div>
          
          <CardHeader className="text-center relative z-10">
            <CardTitle className="text-xl font-heading text-neutral-200">Overall Website Health</CardTitle>
            <div className={`text-7xl font-bold mt-4 ${
              overallScore >= 80 ? "text-emerald-400" : 
              overallScore >= 60 ? "text-blue-400" : 
              overallScore >= 40 ? "text-amber-400" : 
              "text-red-400"
            }`}>
              {overallScore}
            </div>
            <CardDescription className="text-lg mt-2 font-body text-neutral-400">
              {getScoreLabel(overallScore)} website health
            </CardDescription>
          </CardHeader>
        </Card>
      </motion.div>

      {/* Score Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
        <ScoreCard
          title="Security"
          score={scanResult.security.score}
          icon={Shield}
          issues={scanResult.security.issues}
          details={
            <div className="space-y-1 max-h-32 overflow-y-auto">
              {scanResult.security.checks.slice(0, 5).map((check, index) => (
                <div key={index} className={`text-xs flex items-center gap-1 ${
                  check.status === 'pass' ? 'text-emerald-400' : 
                  check.status === 'warning' ? 'text-amber-400' : 'text-red-400'
                }`}>
                  {check.status === 'pass' ? '✓' : check.status === 'warning' ? '⚠' : '✗'}
                  <span className="truncate">{check.name}</span>
                </div>
              ))}
              {scanResult.security.checks.length > 5 && (
                <div className="text-xs text-neutral-500">
                  +{scanResult.security.checks.length - 5} more checks
                </div>
              )}
            </div>
          }
        />
        
        <ScoreCard
          title="Performance"
          score={scanResult.performance.score}
          icon={Zap}
          issues={[]} // Performance issues are typically metrics, not strings
          details={
            <div className="space-y-1">
              {scanResult.performance.details.loadTime && (
                <div className="text-xs">Load: {formatDuration(scanResult.performance.details.loadTime)}</div>
              )}
              {scanResult.performance.details.pageSize && (
                <div className="text-xs">Size: {formatBytes(scanResult.performance.details.pageSize)}</div>
              )}
            </div>
          }
        />
        
        <ScoreCard
          title="SEO"
          score={scanResult.seo.score}
          icon={Search}
          issues={scanResult.seo.issues}
          details={
            <div className="space-y-1 max-h-32 overflow-y-auto">
              {scanResult.seo.checks.slice(0, 3).map((check, index) => (
                <div key={index} className={`text-xs flex items-center gap-1 ${
                  check.status === 'pass' ? 'text-emerald-400' : 
                  check.status === 'warning' ? 'text-amber-400' : 'text-red-400'
                }`}>
                  {check.status === 'pass' ? '✓' : check.status === 'warning' ? '⚠' : '✗'}
                  <span className="truncate">{check.name}</span>
                </div>
              ))}
              {scanResult.seo.checks.length > 3 && (
                <div className="text-xs text-neutral-500">
                  +{scanResult.seo.checks.length - 3} more checks
                </div>
              )}
            </div>
          }
        />
        
        <ScoreCard
          title="Accessibility"
          score={scanResult.accessibility.score}
          icon={Eye}
          issues={scanResult.accessibility.issues}
          details={
            <div className="space-y-1 max-h-32 overflow-y-auto">
              {scanResult.accessibility.checks.slice(0, 3).map((check, index) => (
                <div key={index} className={`text-xs flex items-center gap-1 ${
                  check.status === 'pass' ? 'text-emerald-400' : 
                  check.status === 'warning' ? 'text-amber-400' : 'text-red-400'
                }`}>
                  {check.status === 'pass' ? '✓' : check.status === 'warning' ? '⚠' : '✗'}
                  <span className="truncate">{check.name}</span>
                </div>
              ))}
              {scanResult.accessibility.checks.length > 3 && (
                <div className="text-xs text-neutral-500">
                  +{scanResult.accessibility.checks.length - 3} more checks
                </div>
              )}
            </div>
          }
        />
      </div>

      {/* Charts Section */}
      <div className="mt-6 space-y-8">
        <h2 className="text-2xl font-heading font-bold bg-gradient-to-r from-blue-400 via-indigo-400 to-purple-400 text-transparent bg-clip-text">Interactive Visualizations</h2>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="h-full"
          >
            <Card className="border border-neutral-800 bg-neutral-900/60 backdrop-blur-md h-full shadow-lg hover:shadow-blue-900/20 transition-all duration-300 hover:-translate-y-1 chart-3d-container">
              <CardHeader>
                <CardTitle className="font-heading font-semibold text-lg text-neutral-100">Score Breakdown</CardTitle>
                <CardDescription className="font-body text-neutral-400">Compare scores across all categories</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="chart-3d relative">
                  <div className="absolute inset-0 bg-gradient-to-b from-neutral-900/0 via-neutral-900/0 to-neutral-900 opacity-70 z-10 pointer-events-none"></div>
                  <Interactive3DChart 
                    data={chartData}
                    type="bar"
                    height={320}
                  />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="h-full"
          >
            <Card className="border border-neutral-800 bg-neutral-900/60 backdrop-blur-md h-full shadow-lg hover:shadow-purple-900/20 transition-all duration-300 hover:-translate-y-1 chart-3d-container">
              <CardHeader>
                <CardTitle className="font-heading font-semibold text-lg text-neutral-100">Score Distribution</CardTitle>
                <CardDescription className="font-body text-neutral-400">Visual representation of relative scores</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="chart-3d relative">
                  <div className="absolute inset-0 bg-gradient-to-b from-neutral-900/0 via-neutral-900/0 to-neutral-900 opacity-70 z-10 pointer-events-none"></div>
                  <Interactive3DChart 
                    data={chartData}
                    type="donut"
                    title="Score Distribution"
                    height={320}
                  />
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* Additional Interactive Chart */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card className="border border-neutral-800 bg-neutral-900/60 backdrop-blur-md shadow-lg hover:shadow-red-900/20 transition-all duration-300 hover:-translate-y-1 chart-3d-container">
            <CardHeader>
              <CardTitle className="font-heading font-semibold text-lg text-neutral-100">Security Analysis</CardTitle>
              <CardDescription className="font-body text-neutral-400">Breakdown of security check results</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="chart-3d relative">
                <div className="absolute inset-0 bg-gradient-to-b from-neutral-900/0 via-neutral-900/0 to-neutral-900 opacity-70 z-10 pointer-events-none"></div>
                <Interactive3DChart 
                  data={[
                    { name: 'Passed Checks', score: scanResult.security.checks.filter(c => c.status === 'pass').length, color: 'rgba(34, 197, 94, 0.85)' },
                    { name: 'Warning Checks', score: scanResult.security.checks.filter(c => c.status === 'warning').length, color: 'rgba(245, 158, 11, 0.85)' },
                    { name: 'Failed Checks', score: scanResult.security.checks.filter(c => c.status === 'fail').length, color: 'rgba(239, 68, 68, 0.85)' },
                  ]}
                  type="pie"
                  height={350}
                />
                <div className="absolute inset-0 bg-gradient-to-b from-neutral-900/0 via-neutral-900/0 to-neutral-900 opacity-70 z-10 pointer-events-none"></div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* OWASP Top 10 Security Details */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ duration: 0.5, delay: 0.5 }}
      >
        <Card className="border border-neutral-800 bg-neutral-900/60 backdrop-blur-md shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 font-heading text-neutral-100">
              <Shield className="h-5 w-5 text-red-400" />
              Security Analysis
            </CardTitle>
            <CardDescription className="text-neutral-400">
              Assessment based on OWASP Top 10 vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {scanResult.security.checks.map((check, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ delay: index * 0.05 }}
                  className={`p-4 rounded-lg ${
                    check.status === 'pass' ? 'bg-green-950/20 border border-green-900/30' : 
                    check.status === 'warning' ? 'bg-amber-950/20 border border-amber-900/30' : 
                    'bg-red-950/20 border border-red-900/30'
                  }`}
                >
                  <div className="flex items-start gap-3">
                    <div className={`mt-0.5 ${
                      check.status === 'pass' ? 'text-green-400' : 
                      check.status === 'warning' ? 'text-amber-400' : 
                      'text-red-400'
                    }`}>
                      {check.status === 'pass' ? (
                        <CheckCircle className="h-4 w-4" />
                      ) : check.status === 'warning' ? (
                        <AlertTriangle className="h-4 w-4" />
                      ) : (
                        <AlertTriangle className="h-4 w-4" />
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className={`font-medium text-sm ${
                        check.status === 'pass' ? 'text-green-400' : 
                        check.status === 'warning' ? 'text-amber-400' : 
                        'text-red-400'
                      }`}>
                        {check.name}
                      </h4>
                      <p className="text-xs mt-1 text-neutral-400">
                        {check.description}
                      </p>
                      {check.recommendation && (
                        <p className={`text-xs mt-2 font-medium ${
                          check.status === 'pass' ? 'text-green-400/70' : 
                          check.status === 'warning' ? 'text-amber-400/70' : 
                          'text-red-400/70'
                        }`}>
                          {check.recommendation}
                        </p>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Recommendations */}
      {scanResult.recommendations.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <Card className="border border-neutral-800 bg-neutral-900/60 backdrop-blur-md shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 font-heading text-neutral-100">
                <Info className="h-5 w-5 text-blue-400" />
                Recommendations
              </CardTitle>
              <CardDescription className="text-neutral-400">
                Actionable steps to improve your website
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {scanResult.recommendations.map((recommendation, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    whileInView={{ opacity: 1, x: 0 }}
                    viewport={{ once: true }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-start gap-3 p-3 border border-neutral-800 rounded-lg bg-neutral-800/30 hover:bg-neutral-800/50 transition-colors"
                  >
                    <div className="flex-shrink-0 w-6 h-6 bg-blue-900/50 rounded-full flex items-center justify-center text-sm font-medium text-blue-400">
                      {index + 1}
                    </div>
                    <div className="text-sm text-neutral-300">{recommendation}</div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  );
}
